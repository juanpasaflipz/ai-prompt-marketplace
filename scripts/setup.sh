#!/bin/bash
# Initial setup script for AI Prompt Marketplace

set -e

echo "üöÄ Setting up AI Prompt Marketplace..."

# Check prerequisites
command -v python3 >/dev/null 2>&1 || { echo "‚ùå Python 3 required but not installed."; exit 1; }
command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker required but not installed."; exit 1; }
command -v docker-compose >/dev/null 2>&1 || { echo "‚ùå Docker Compose required but not installed."; exit 1; }

# Check Python version
PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
REQUIRED_VERSION="3.8"
if [ "$(printf '%s\n' "$REQUIRED_VERSION" "$PYTHON_VERSION" | sort -V | head -n1)" != "$REQUIRED_VERSION" ]; then 
    echo "‚ùå Python $REQUIRED_VERSION or higher is required (found $PYTHON_VERSION)"
    exit 1
fi

# Create virtual environment
echo "üì¶ Creating virtual environment..."
python3 -m venv venv
source venv/bin/activate

# Upgrade pip
echo "‚¨ÜÔ∏è Upgrading pip..."
pip install --upgrade pip

# Install dependencies
echo "üìö Installing dependencies..."
pip install -r requirements.txt

# Copy environment file
if [ ! -f .env ]; then
    echo "üîß Setting up environment..."
    cp .env.example .env
    echo "‚ö†Ô∏è  Please update .env with your configuration"
else
    echo "‚úÖ .env file already exists"
fi

# Start PostgreSQL and Redis with Docker
echo "üê≥ Starting PostgreSQL and Redis..."
docker-compose -f docker/docker-compose.yml up -d postgres redis

# Wait for PostgreSQL to be ready
echo "‚è≥ Waiting for database to be ready..."
max_attempts=30
attempt=0
while ! docker exec prompt-marketplace-postgres pg_isready -U postgres > /dev/null 2>&1; do
    attempt=$((attempt + 1))
    if [ $attempt -eq $max_attempts ]; then
        echo "‚ùå Database failed to start after $max_attempts attempts"
        exit 1
    fi
    echo -n "."
    sleep 1
done
echo " ‚úÖ"

# Create database if it doesn't exist
echo "üóÑÔ∏è Creating database..."
docker exec prompt-marketplace-postgres psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'prompt_marketplace'" | grep -q 1 || \
docker exec prompt-marketplace-postgres psql -U postgres -c "CREATE DATABASE prompt_marketplace"

# Initialize Alembic if not already initialized
if [ ! -d "alembic" ]; then
    echo "üîÑ Initializing Alembic..."
    alembic init alembic
    
    # Update alembic.ini with our database URL
    sed -i.bak 's|sqlalchemy.url = .*|sqlalchemy.url = postgresql://postgres:postgres@localhost:5432/prompt_marketplace|' alembic.ini
    rm -f alembic.ini.bak
fi

# Create initial migration
echo "üìù Creating initial migration..."
alembic revision --autogenerate -m "Initial schema" 2>/dev/null || echo "‚ö†Ô∏è  Migration already exists or no changes detected"

# Run migrations
echo "üîÑ Running database migrations..."
alembic upgrade head 2>/dev/null || echo "‚úÖ Database is up to date"

# Seed development data
echo "üå± Seeding development data..."
python -m cli.manage db seed 2>/dev/null || echo "‚ö†Ô∏è  Seeding skipped (CLI not yet implemented)"

echo ""
echo "‚úÖ Setup complete!"
echo ""
echo "üìã Next steps:"
echo "1. Update .env with your configuration (Stripe keys, OpenAI key, etc.)"
echo "2. Run 'make dev' to start the development server"
echo "3. Visit http://localhost:8000/docs for API documentation"
echo ""
echo "üõ†Ô∏è Useful commands:"
echo "  make dev         - Start development server"
echo "  make test        - Run tests"
echo "  make lint        - Check code quality"
echo "  make docker-logs - View Docker logs"
echo "  make db-shell    - Access PostgreSQL shell"